// Mocks generated by Mockito 5.4.6 from annotations
// in /mocks/mock_timer_controller.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i3;

import 'package:flutter/material.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:linear_timekeeper/model/timer_controller.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDuration_0 extends _i1.SmartFake implements Duration {
  _FakeDuration_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TimerController].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimerController extends _i1.Mock implements _i2.TimerController {
  MockTimerController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get maxPresetMinutes =>
      (super.noSuchMethod(Invocation.getter(#maxPresetMinutes), returnValue: 0)
          as int);

  @override
  int get presetIntervalMinutes =>
      (super.noSuchMethod(
            Invocation.getter(#presetIntervalMinutes),
            returnValue: 0,
          )
          as int);

  @override
  Duration get duration =>
      (super.noSuchMethod(
            Invocation.getter(#duration),
            returnValue: _FakeDuration_0(this, Invocation.getter(#duration)),
          )
          as Duration);

  @override
  Duration get remainingTime =>
      (super.noSuchMethod(
            Invocation.getter(#remainingTime),
            returnValue: _FakeDuration_0(
              this,
              Invocation.getter(#remainingTime),
            ),
          )
          as Duration);

  @override
  _i2.TimerState get timerState =>
      (super.noSuchMethod(
            Invocation.getter(#timerState),
            returnValue: _i2.TimerState.initial,
          )
          as _i2.TimerState);

  @override
  List<int> get availablePresetIntervalValues =>
      (super.noSuchMethod(
            Invocation.getter(#availablePresetIntervalValues),
            returnValue: <int>[],
          )
          as List<int>);

  @override
  List<int> get presetMinutesList =>
      (super.noSuchMethod(
            Invocation.getter(#presetMinutesList),
            returnValue: <int>[],
          )
          as List<int>);

  @override
  set maxPresetMinutes(int? _maxPresetMinutes) => super.noSuchMethod(
    Invocation.setter(#maxPresetMinutes, _maxPresetMinutes),
    returnValueForMissingStub: null,
  );

  @override
  set presetIntervalMinutes(int? _presetIntervalMinutes) => super.noSuchMethod(
    Invocation.setter(#presetIntervalMinutes, _presetIntervalMinutes),
    returnValueForMissingStub: null,
  );

  @override
  set onTimerFinished(_i3.VoidCallback? _onTimerFinished) => super.noSuchMethod(
    Invocation.setter(#onTimerFinished, _onTimerFinished),
    returnValueForMissingStub: null,
  );

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  List<_i4.DropdownMenuItem<int>> getPresetIntervalDropdownItems() =>
      (super.noSuchMethod(
            Invocation.method(#getPresetIntervalDropdownItems, []),
            returnValue: <_i4.DropdownMenuItem<int>>[],
          )
          as List<_i4.DropdownMenuItem<int>>);

  @override
  void setDuration(int? seconds) => super.noSuchMethod(
    Invocation.method(#setDuration, [seconds]),
    returnValueForMissingStub: null,
  );

  @override
  void setManualDuration(int? seconds) => super.noSuchMethod(
    Invocation.method(#setManualDuration, [seconds]),
    returnValueForMissingStub: null,
  );

  @override
  void setMaxDuration(int? minutes) => super.noSuchMethod(
    Invocation.method(#setMaxDuration, [minutes]),
    returnValueForMissingStub: null,
  );

  @override
  void setPresetInterval(int? intervalMinutes) => super.noSuchMethod(
    Invocation.method(#setPresetInterval, [intervalMinutes]),
    returnValueForMissingStub: null,
  );

  @override
  void startTimer() => super.noSuchMethod(
    Invocation.method(#startTimer, []),
    returnValueForMissingStub: null,
  );

  @override
  void pauseTimer() => super.noSuchMethod(
    Invocation.method(#pauseTimer, []),
    returnValueForMissingStub: null,
  );

  @override
  void stopTimer() => super.noSuchMethod(
    Invocation.method(#stopTimer, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i3.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i3.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
